#include <iostream>

#ifndef DECART_NODE_H
#define DECART_NODE_H

struct Node;

typedef std::pair<Node*, Node*> Pair;

/**
 * @brief Структура Node представляет узел для декартова дерева.
 * Каждый узел содержит целочисленное значение (key), приоритет (prior),
 * указатели на левого (l) и правого (r) потомка.
 */
struct Node {
    int key; /**< Значение узла. */
    int prior; /**< Приоритет узла. */
    Node *l = 0, *r = 0; /**< Указатели на левого и правого потомка. */

    /**
     * @brief Конструктор для создания объекта класса Node.
     * @param _key Значение узла и его приоритет.
     */
    Node(int _key): key(_key), prior(_key) {}

    /**
     * @brief Деструктор, освобождает выделенную память.
     */
    ~Node();
};

/**
 * @brief Пространство имен Nodes содержит функции для работы с узлами декартова дерева.
 */
namespace Nodes {
    /**
     * @brief Поиск значения в декартовом дереве.
     * @param n Указатель на корень дерева.
     * @param x Значение, которое необходимо найти.
     * @return true, если значение найдено; false в противном случае.
     */
    bool find(Node *n, int x); 

    /**
     * @brief Слияние двух декартовых деревьев.
     * @param l Указатель на корень первого дерева.
     * @param r Указатель на корень второго дерева.
     * @return Указатель на корень нового дерева, полученного слиянием.
     */
    Node* merge(Node *l, Node *r);

    /**
     * @brief Разделение декартова дерева по значению.
     * @param p Указатель на корень дерева.
     * @param x Значение, по которому производится разделение.
     * @return Пара указателей на корень двух получившихся деревьев.
     */
    Pair split(Node *p, int x);   
}

#endif